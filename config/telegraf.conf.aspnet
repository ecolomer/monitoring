# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = "/Program Files/Telegraf/telegraf.log"

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Publish all metrics to /metrics for Prometheus to scrape
[[outputs.prometheus_client]]
  # Address to listen on
  listen = ":9273"

  # Expiration interval for each metric. 0 == no expiration
  expiration_interval = "60s"


###############################################################################
#                                  INPUTS                                     #
###############################################################################

# Windows Performance Counters plugin.
# These are the recommended method of monitoring system metrics on windows,
# as the regular system plugins (inputs.cpu, inputs.mem, etc.) rely on WMI,
# which utilize more system resources.
#
# See more configuration examples at:
#   https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters

[[inputs.win_perf_counters]]
  [[inputs.win_perf_counters.object]]
    # Processor usage, alternative to native, reports on a per core.
    ObjectName = "Processor"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Interrupt Time",
      "% Privileged Time",
      "% User Time",
      "% Processor Time",
      "% DPC Time"
    ]
    Measurement = "win_cpu"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "Process"
    Counters = [
      "% Processor Time",
      "Handle Count",
      "Private Bytes",
      "Thread Count",
      "Virtual Bytes",
      "Working Set",
      "Elapsed Time"
    ]
    Instances = [ "*" ]
    Measurement = "win_process"

  [[inputs.win_perf_counters.object]]
    # Disk times and queues
    ObjectName = "LogicalDisk"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
      "Current Disk Queue Length",
      "Avg. Disk Queue Length",                         
      "% Free Space",
      "Free Megabytes"
    ]
    Measurement = "win_disk"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "PhysicalDisk"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
      "Disk Transfers/sec",
      "Disk Reads/sec",
      "Disk Writes/sec",
      "Disk Bytes/sec",
      "Disk Read Bytes/sec",
      "Disk Write Bytes/sec",
      "Avg. Disk Bytes/Transfer",
      "Avg. Disk Bytes/Read",
      "Avg. Disk Bytes/Write",
      "Avg. Disk sec/Transfer",
      "Avg. Disk sec/Read",
      "Avg. Disk sec/Write",
      "Current Disk Queue Length",
      "Avg. Disk Queue Length"
    ]
    Measurement = "win_diskio"
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "Network Interface"
    Instances = ["*"]
    Counters = [
      "Bytes Received/sec",
      "Bytes Sent/sec",
      "Packets Received/sec",
      "Packets Sent/sec",
      "Packets Received Discarded",
      "Packets Outbound Discarded",
      "Packets Received Errors",
      "Packets Outbound Errors"
    ]
    Measurement = "win_net"

  [[inputs.win_perf_counters.object]]
    ObjectName = "System"
    Counters = [
      "Context Switches/sec",
      "System Calls/sec",
      "Processor Queue Length",
      "System Up Time"
    ]
    Instances = ["------"]
    Measurement = "win_system"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Memory object.
    ObjectName = "Memory"
    Counters = [
      "Available Bytes",
      "Cache Faults/sec",
      "Demand Zero Faults/sec",
      "Page Faults/sec",
      "Pages/sec",
      "Transition Faults/sec",
      "Pool Nonpaged Bytes",
      "Pool Paged Bytes",
      "Standby Cache Reserve Bytes",
      "Standby Cache Normal Priority Bytes",
      "Standby Cache Core Bytes"

    ]
    # Use 6 x - to remove the Instance bit from the query.
    Instances = ["------"]
    Measurement = "win_mem"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Paging File object.
    ObjectName = "Paging File"
    Counters = [
      "% Usage"
    ]
    Instances = ["_Total"]
    Measurement = "win_swap"
    
#### IIS / ASP.NET ####

  [[inputs.win_perf_counters.object]]
    ObjectName = "Web Service"
    Counters = [
      "Bytes Received/sec",
      "Bytes Sent/sec",
      "Get Requests/sec",
      "Head Requests/sec",
      "Post Requests/sec",
      "Not Found Errors/sec",
      "Connection Attempts/sec",
      "Current Connections",
      "ISAPI Extension Requests/sec",
      "Service Uptime"
    ]
    Instances = [ "*" ]
    Measurement = "win_websvc"
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "Web Service Cache"
    Counters = [
      "URI Cache Hits %",
      "Kernel: URI Cache Hits %",
      "File Cache Hits %"
    ]
    Instances = [ "------" ]
    Measurement = "win_websvc_cache"

  [[inputs.win_perf_counters.object]]
    ObjectName = "APP_POOL_WAS"
    Counters = [
      "Current Application Pool State",
      "Current Worker Processes",
      "Total Worker Process Failures",
      "Total Application Pool Recycles",
      "Total Application Pool Uptime"
    ]
    Instances = [ "*" ]
    Measurement = "win_app_pool"

  [[inputs.win_perf_counters.object]]
    ObjectName = "W3SVC_W3WP"
    Counters = [
      "% 401 HTTP Response Sent",
      "% 403 HTTP Response Sent",
      "% 404 HTTP Response Sent",
      "% 500 HTTP Response Sent",
      "Total HTTP Requests Served",
      "Requests / Sec",
      "Total Threads",
      "Active Threads Count",
      "Maximum Threads Count",
      "Active Requests"
    ]
    Instances = [ "*" ]
    Measurement = "win_w3svc_w3wp"
    
  [[inputs.win_perf_counters.object]]
    ObjectName = "ASP.NET"
    Counters = [
      "Application Restarts",
      "Request Wait Time",
      "Requests Current",
      "Requests Queued",
      "Requests Rejected"
    ]
    Instances = [ "------" ]
    Measurement = "win_aspnet"

  [[inputs.win_perf_counters.object]]
    ObjectName = "ASP.NET Applications"
    Counters = [
      "Cache Total Entries",
      "Cache Total Hit Ratio",
      "Cache Total Turnover Rate",
      "Output Cache Entries",
      "Output Cache Hits",
      "Output Cache Hit Ratio",
      "Output Cache Turnover Rate",
      "Compilations Total",
      "Errors Total",
      "Errors Unhandled During Execution",
      "Pipeline Instance Count",
      "Requests Executing",
      "Requests Failed",
      "Requests Not Found",
      "Requests Succeeded",
      "Requests Timed Out",
      "Requests in Application Queue",
      "Requests Total",
      "Requests/Sec",
      "Request Wait Time"
    ]
    Instances = [ "*" ]
    Measurement = "win_aspnet_app"

  [[inputs.win_perf_counters.object]]
    ObjectName = ".NET CLR Exceptions"
    Counters = [
      "# of Exceps Thrown / sec"
    ]
    Instances = [ "*", "_Global_" ]
    Measurement = "win_dotnet_exceptions"

  [[inputs.win_perf_counters.object]]
    ObjectName = ".NET CLR Jit"
    Counters = [
      "% Time in Jit",
      "IL Bytes Jitted / sec"
    ]
    Instances = [ "*", "_Global_" ]
    Measurement = "win_dotnet_jit"

  [[inputs.win_perf_counters.object]]
    ObjectName = ".NET CLR Loading"
    Counters = [
      "% Time Loading"
    ]
    Instances = [ "*", "_Global_" ]
    Measurement = "win_dotnet_loading"

  [[inputs.win_perf_counters.object]]
    ObjectName = ".NET CLR LocksAndThreads"
    Counters = [
      "# of current logical Threads",
      "# of current physical Threads",
      "# of current recognized threads",
      "# of total recognized threads",
      "Queue Length / sec",
      "Total # of Contentions",
      "Current Queue Length"
    ]
    Instances = [ "*", "_Global_" ]
    Measurement = "win_dotnet_locks"

  [[inputs.win_perf_counters.object]]
    ObjectName = ".NET CLR Memory"
    Counters = [
      "% Time in GC",
      "# Bytes in all Heaps",
      "# Gen 0 Collections",
      "# Gen 1 Collections",
      "# Gen 2 Collections",
      "# Induced GC",
      "Allocated Bytes/sec",
      "Finalization Survivors",
      "Gen 0 heap size",
      "Gen 1 heap size",
      "Gen 2 heap size",
      "Large Object Heap size",
      "# of Pinned Objects"
    ]
    Instances = [ "*", "_Global_" ]
    Measurement = "win_dotnet_mem"

  [[inputs.win_perf_counters.object]]
    ObjectName = ".NET CLR Security"
    Counters = [
      "% Time in RT checks",
      "Stack Walk Depth",
      "Total Runtime Checks"
    ]
    Instances = [ "*", "_Global_" ]
    Measurement = "win_dotnet_security"

## To get the following four counters, you need to activate them first
## https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/performance-counters
##    "NumberOfActiveConnections",
##    "NumberOfFreeConnections",
##    "SoftConnectsPerSecond",
##    "SoftDisconnectsPerSecond"
########################################################################################

###############################################################################
#                               PROCESSORS                                    #
###############################################################################

[[processors.rename]]
  ## Specify one sub-table per rename operation.
  [[processors.rename.replace]]
    tag = "instance"
    dest = "counterinstance"
